                             //
                             // ram 
                             // ram:0000:7c00-ram:0000:7dff
                             //
             assume DF = 0x0  (Default)
       0000:7c00 e9 3b 00        JMP        LAB_0000_7c3e
                             OEM_name                                        XREF[1]:     print_ERR_401:0000:7d83(R)  
       0000:7c03 45 52 52        ds         "ERR 401"
                 20 34 30 
                 31 00
       0000:7c0b 00 02           dw         200h
                             sectors_per_cluster                             XREF[1]:     0000:7cc5(R)  
       0000:7c0d 01              db         1h
                             reserved_sector_count                           XREF[1]:     0000:7c5f(R)  
       0000:7c0e 01 00           dw         1h
                             num_file_alloc_tables
       0000:7c10 02              db         2h
                             max_root_entries                                XREF[2]:     0000:7c76(R), 0000:7c94(R)  
       0000:7c11 e0 00           dw         E0h
                             total_sectors
       0000:7c13 40 0b           dw         B40h
                             media_descriptor
       0000:7c15 f0              db         F0h
                             sectors_per_FAT                                 XREF[2]:     0000:7c62(R), 0000:7c72(R)  
       0000:7c16 09 00           dw         9h
                             sectors_per_track                               XREF[1]:     0000:7c5b(W)  
       0000:7c18 12 00           dw         12h
                             num_heads                                       XREF[1]:     0000:7c54(W)  
       0000:7c1a 02 00           dw         2h
       0000:7c1c 00              ??         00h
       0000:7c1d 00              ??         00h
       0000:7c1e 00              ??         00h
       0000:7c1f 00              ??         00h
       0000:7c20 00              ??         00h
       0000:7c21 00              ??         00h
       0000:7c22 00              ??         00h
       0000:7c23 00              ??         00h
                             drive_index                                     XREF[1]:     0000:7c47(W)  
       0000:7c24 00              db         0h
       0000:7c25 00              ??         00h
       0000:7c26 29              ??         29h    )
       0000:7c27 b9              ??         B9h
       0000:7c28 ce              ??         CEh
       0000:7c29 7b              ??         7Bh    {
       0000:7c2a 11              ??         11h
       0000:7c2b 49              ??         49h    I
       0000:7c2c 4e              ??         4Eh    N
       0000:7c2d 50              ??         50h    P
       0000:7c2e 43              ??         43h    C
       0000:7c2f 57              ??         57h    W
       0000:7c30 45              ??         45h    E
       0000:7c31 54              ??         54h    T
       0000:7c32 52              ??         52h    R
       0000:7c33 55              ??         55h    U
       0000:7c34 53              ??         53h    S
       0000:7c35 54              ??         54h    T
       0000:7c36 46              ??         46h    F
       0000:7c37 41              ??         41h    A
       0000:7c38 54              ??         54h    T
       0000:7c39 31              ??         31h    1
       0000:7c3a 32              ??         32h    2
       0000:7c3b 20              ??         20h     
       0000:7c3c 20              ??         20h     
       0000:7c3d 20              ??         20h     
                             LAB_0000_7c3e                                   XREF[1]:     0000:7c00(j)  
       0000:7c3e 31 c0           XOR        AX,AX
       0000:7c40 8e d8           MOV        DS,AX
       0000:7c42 8e d0           MOV        SS,AX
       0000:7c44 bc 00 7c        MOV        SP,0x7c00
       0000:7c47 88 16 24 7c     MOV        byte ptr [drive_index],DL
       0000:7c4b b8 00 08        MOV        AX,0x800
       0000:7c4e cd 13           INT        0x13
       0000:7c50 c1 ea 08        SHR        DX,0x8
       0000:7c53 42              INC        DX
       0000:7c54 89 16 1a 7c     MOV        word ptr [num_heads],DX                          = 2h
       0000:7c58 83 e1 3f        AND        CX,0x3f
       0000:7c5b 89 0e 18 7c     MOV        word ptr [sectors_per_track],CX                  = 12h
       0000:7c5f a1 0e 7c        MOV        AX,[reserved_sector_count]                       = 1h
       0000:7c62 8b 0e 16 7c     MOV        CX,word ptr [sectors_per_FAT]                    = 9h
       0000:7c66 bb 80 8e        MOV        BX,0x8e80
       0000:7c69 8e c3           MOV        ES,BX                                            Read buffer high
       0000:7c6b 31 db           XOR        BX,BX
       0000:7c6d e8 d1 00        CALL       read_sectors                                     undefined read_sectors()
       0000:7c70 01 c8           ADD        AX,CX
       0000:7c72 03 06 16 7c     ADD        AX,word ptr [sectors_per_FAT]                    = 9h
       0000:7c76 8b 0e 11 7c     MOV        CX,word ptr [max_root_entries]                   = E0h
       0000:7c7a c1 e1 05        SHL        CX,0x5
       0000:7c7d 81 c1 ff 01     ADD        CX,0x1ff
       0000:7c81 c1 e9 09        SHR        CX,0x9
       0000:7c84 bb 00 08        MOV        BX,0x800
       0000:7c87 8e c3           MOV        ES,BX
       0000:7c89 31 db           XOR        BX,BX
       0000:7c8b e8 b3 00        CALL       read_sectors                                     undefined read_sectors()
       0000:7c8e 01 c8           ADD        AX,CX
       0000:7c90 31 ff           XOR        DI,DI
       0000:7c92 89 c5           MOV        BP,AX
       0000:7c94 8b 16 11 7c     MOV        DX,word ptr [max_root_entries]                   = E0h
                             LAB_0000_7c98                                   XREF[1]:     0000:7caa(j)  
       0000:7c98 be f3 7d        MOV        SI,0x7df3
       0000:7c9b b9 0b 00        MOV        CX,0xb
       0000:7c9e 57              PUSH       DI
       0000:7c9f f3 a6           CMPSB.REPE ES:DI=>LAB_0000_8000,SI=>s_SECUREOSBIN_0000_7df3 = "SECUREOSBIN"
       0000:7ca1 5f              POP        DI
       0000:7ca2 09 c9           OR         CX,CX
       0000:7ca4 74 09           JZ         read_secureos
       0000:7ca6 83 c7 20        ADD        DI,0x20
       0000:7ca9 4a              DEC        DX
       0000:7caa 75 ec           JNZ        LAB_0000_7c98
       0000:7cac e9 c5 00        JMP        print_ERR_and_RST                                undefined print_ERR_and_RST()
                             -- Flow Override: CALL_RETURN (CALL_TERMINATOR)
                             read_secureos                                   XREF[1]:     0000:7ca4(j)  
       0000:7caf 26 8b 75 1a     MOV        SI,word ptr ES:[DI + 0x1a]
       0000:7cb3 bb 00 08        MOV        BX,0x800
       0000:7cb6 8e c3           MOV        ES,BX
                             LAB_0000_7cb8                                   XREF[1]:     0000:7cfe(j)  
       0000:7cb8 81 fe f8 0f     CMP        SI,0xff8
       0000:7cbc 7d 42           JGE        LAB_0000_7d00
       0000:7cbe 89 f0           MOV        AX,SI
       0000:7cc0 83 e8 02        SUB        AX,0x2
       0000:7cc3 31 d2           XOR        DX,DX
       0000:7cc5 8a 0e 0d 7c     MOV        CL,byte ptr [sectors_per_cluster]                = 1h
       0000:7cc9 30 ed           XOR        CH,CH
       0000:7ccb f7 e1           MUL        CX
       0000:7ccd 01 e8           ADD        AX,BP
       0000:7ccf 31 db           XOR        BX,BX
       0000:7cd1 e8 6d 00        CALL       read_sectors                                     undefined read_sectors()
       0000:7cd4 c1 e1 05        SHL        CX,0x5
       0000:7cd7 8c c3           MOV        BX,ES
       0000:7cd9 01 cb           ADD        BX,CX
       0000:7cdb 8e c3           MOV        ES,BX
       0000:7cdd 1e              PUSH       DS
       0000:7cde bb 80 8e        MOV        BX,0x8e80
       0000:7ce1 8e db           MOV        DS,BX
       0000:7ce3 89 f3           MOV        BX,SI
       0000:7ce5 d1 e3           SHL        BX,0x1
       0000:7ce7 01 f3           ADD        BX,SI
       0000:7ce9 d1 eb           SHR        BX,0x1
       0000:7ceb 8b 1f           MOV        BX,word ptr [BX]
       0000:7ced 1f              POP        DS
       0000:7cee 83 e6 01        AND        SI,0x1
       0000:7cf1 74 05           JZ         LAB_0000_7cf8
       0000:7cf3 c1 eb 04        SHR        BX,0x4
       0000:7cf6 eb 04           JMP        LAB_0000_7cfc
                             LAB_0000_7cf8                                   XREF[1]:     0000:7cf1(j)  
       0000:7cf8 81 e3 ff 0f     AND        BX,0xfff
                             LAB_0000_7cfc                                   XREF[1]:     0000:7cf6(j)  
       0000:7cfc 89 de           MOV        SI,BX
       0000:7cfe eb b8           JMP        LAB_0000_7cb8
                             LAB_0000_7d00                                   XREF[1]:     0000:7cbc(j)  
       0000:7d00 8c c3           MOV        BX,ES
       0000:7d02 b8 04 e4        MOV        AX,0xe404
       0000:7d05 8e c0           MOV        ES,AX
       0000:7d07 31 ff           XOR        DI,DI
       0000:7d09 b8 00 08        MOV        AX,0x800
       0000:7d0c 8e d8           MOV        DS,AX
                             LAB_0000_7d0e                                   XREF[1]:     0000:7d20(j)  
       0000:7d0e 31 f6           XOR        SI,SI
       0000:7d10 e8 80 00        CALL       FUN_0000_7d93                                    undefined FUN_0000_7d93()
       0000:7d13 83 c6 08        ADD        SI,0x8
       0000:7d16 e8 7a 00        CALL       FUN_0000_7d93                                    undefined FUN_0000_7d93()
       0000:7d19 8c d8           MOV        AX,DS
       0000:7d1b 40              INC        AX
       0000:7d1c 8e d8           MOV        DS,AX
       0000:7d1e 39 d8           CMP        AX,BX
       0000:7d20 72 ec           JC         LAB_0000_7d0e
       0000:7d22 fd              STD
       0000:7d23 b8 00 f0        MOV        AX,0xf000
       0000:7d26 8e c0           MOV        ES,AX
       0000:7d28 31 ff           XOR        DI,DI
       0000:7d2a 8e df           MOV        DS,DI
       0000:7d2c be f2 7d        MOV        SI,0x7df2
       0000:7d2f b9 07 00        MOV        CX,0x7
                             LAB_0000_7d32                                   XREF[1]:     0000:7d39(j)  
       0000:7d32 ac              LODSB      SI=>DAT_0000_7df2                                = C7h
       0000:7d33 26 00 05        ADD        byte ptr ES:[DI],AL
       0000:7d36 75 3c           JNZ        print_ERR_and_RST
       0000:7d38 47              INC        DI
       0000:7d39 e2 f7           LOOP       LAB_0000_7d32
       0000:7d3b fc              CLD
       0000:7d3c ea 00 00        JMPF       LAB_0000_8000
                 00 08
                             **************************************************************
                             *                          FUNCTION                          *
                             **************************************************************
                             undefined __cdecl16near read_sectors()
             undefined         AL:1           <RETURN>
                             read_sectors                                    XREF[3]:     0000:7c6d(c), 0000:7c8b(c), 
                                                                                          0000:7cd1(c)  
       0000:7d41 50              PUSH       AX
       0000:7d42 52              PUSH       DX
       0000:7d43 51              PUSH       CX
       0000:7d44 53              PUSH       BX
       0000:7d45 31 d2           XOR        DX,DX
       0000:7d47 f7 36 18 7c     DIV        word ptr [0x7c18]                                AX = AXin / Sectors per track
       0000:7d4b 42              INC        DX
       0000:7d4c 89 d3           MOV        BX,DX                                            BX = 1 + AXin % Sectors per track
       0000:7d4e 31 d2           XOR        DX,DX
       0000:7d50 f7 36 1a 7c     DIV        word ptr [0x7c1a]
       0000:7d54 89 c1           MOV        CX,AX                                            CX = AXin / sec_per_track / num_
       0000:7d56 86 e9           XCHG       CL,CH
       0000:7d58 c0 e1 06        SHL        CL,0x6
       0000:7d5b 83 e3 3f        AND        BX,0x3f
       0000:7d5e 09 d9           OR         CX,BX
       0000:7d60 c1 e2 08        SHL        DX,0x8
       0000:7d63 8a 16 24 7c     MOV        DL,byte ptr [0x7c24]                             Drive index
       0000:7d67 5b              POP        BX
       0000:7d68 58              POP        AX                                               AL = num sectors (from CL param)
       0000:7d69 50              PUSH       AX
       0000:7d6a b4 02           MOV        AH,0x2                                           Read Sectors from Drive
       0000:7d6c cd 13           INT        0x13
       0000:7d6e 59              POP        CX
       0000:7d6f 5a              POP        DX
       0000:7d70 58              POP        AX
       0000:7d71 72 01           JC         print_ERR_and_RST
       0000:7d73 c3              RET
                             **************************************************************
                             *                          FUNCTION                          *
                             **************************************************************
                             undefined print_ERR_and_RST()
             undefined         AL:1           <RETURN>
                             print_ERR_and_RST                               XREF[3]:     0000:7cac(c), 0000:7d36(j), 
                                                                                          read_sectors:0000:7d71(j)  
       0000:7d74 fc              CLD
       0000:7d75 be 03 7c        MOV        SI,0x7c03
       0000:7d78 e8 06 00        CALL       print_ERR_401                                    undefined print_ERR_401()
       0000:7d7b 31 c0           XOR        AX,AX
       0000:7d7d cd 16           INT        0x16
       0000:7d7f cd 19           INT        0x19
                             **************************************************************
                             *                          FUNCTION                          *
                             **************************************************************
                             undefined __cdecl16near print_ERR_401()
             undefined         AL:1           <RETURN>
                             print_ERR_401                                   XREF[1]:     print_ERR_and_RST:0000:7d78(c)  
       0000:7d81 50              PUSH       AX
       0000:7d82 53              PUSH       BX
                             LAB_0000_7d83                                   XREF[1]:     0000:7d8e(j)  
       0000:7d83 ac              LODSB      SI=>OEM_name                                     = "ERR 401"
       0000:7d84 08 c0           OR         AL,AL
       0000:7d86 74 08           JZ         LAB_0000_7d90
       0000:7d88 31 db           XOR        BX,BX
       0000:7d8a b4 0e           MOV        AH,0xe
       0000:7d8c cd 10           INT        0x10
       0000:7d8e eb f3           JMP        LAB_0000_7d83
                             LAB_0000_7d90                                   XREF[1]:     0000:7d86(j)  
       0000:7d90 5b              POP        BX
       0000:7d91 58              POP        AX
       0000:7d92 c3              RET
                             **************************************************************
                             *                          FUNCTION                          *
                             **************************************************************
                             undefined __cdecl16near FUN_0000_7d93()
             undefined         AL:1           <RETURN>
                             FUN_0000_7d93                                   XREF[2]:     0000:7d10(c), 0000:7d16(c)  
       0000:7d93 66 60           PUSHAD
       0000:7d95 b9 40 00        MOV        CX,0x40
       0000:7d98 66 ba 40        MOV        EDX,0x8dde6e40
                 6e de 8d
                             LAB_0000_7d9e                                   XREF[1]:     0000:7db3(j)  
       0000:7d9e fc              CLD
       0000:7d9f 66 89 d3        MOV        EBX,EDX
       0000:7da2 e8 13 00        CALL       FUN_0000_7db8                                    undefined FUN_0000_7db8()
       0000:7da5 66 81 ea        SUB        EDX,0x9e3779b9
                 b9 79 37 9e
       0000:7dac fd              STD
       0000:7dad 66 89 d3        MOV        EBX,EDX
       0000:7db0 e8 09 00        CALL       FUN_0000_7dbc                                    undefined FUN_0000_7dbc()
       0000:7db3 e2 e9           LOOP       LAB_0000_7d9e
       0000:7db5 66 61           POPAD
       0000:7db7 c3              RET
                             **************************************************************
                             *                          FUNCTION                          *
                             **************************************************************
                             undefined FUN_0000_7db8()
             undefined         AL:1           <RETURN>
                             FUN_0000_7db8                                   XREF[1]:     FUN_0000_7d93:0000:7da2(c)  
       0000:7db8 66 c1 eb 0b     SHR        EBX,0xb
                             **************************************************************
                             *                          FUNCTION                          *
                             **************************************************************
                             undefined __cdecl16near FUN_0000_7dbc()
             undefined         AL:1           <RETURN>
                             FUN_0000_7dbc                                   XREF[1]:     FUN_0000_7d93:0000:7db0(c)  
       0000:7dbc 66 83 e3 03     AND        EBX,0x3
       0000:7dc0 66 c1 e3 02     SHL        EBX,0x2
       0000:7dc4 26 66 8b 19     MOV        EBX,dword ptr ES:[BX + DI]
       0000:7dc8 66 01 d3        ADD        EBX,EDX
       0000:7dcb 66 53           PUSH       EBX
       0000:7dcd 66 8b 04        MOV        EAX,dword ptr [SI]
       0000:7dd0 66 89 c3        MOV        EBX,EAX
       0000:7dd3 66 c1 e0 04     SHL        EAX,0x4
       0000:7dd7 66 c1 eb 05     SHR        EBX,0x5
       0000:7ddb 66 31 c3        XOR        EBX,EAX
       0000:7dde 66 ad           LODSD      SI
       0000:7de0 66 01 d8        ADD        EAX,EBX
       0000:7de3 66 5b           POP        EBX
       0000:7de5 66 31 d8        XOR        EAX,EBX
       0000:7de8 66 29 04        SUB        dword ptr [SI],EAX
       0000:7deb c3              RET
       0000:7dec cc              ??         CCh
       0000:7ded c9              ??         C9h
       0000:7dee ca              ??         CAh
       0000:7def c7              ??         C7h
       0000:7df0 ba              ??         BAh
       0000:7df1 ce              ??         CEh
                             DAT_0000_7df2                                   XREF[1]:     0000:7d32(R)  
       0000:7df2 c7              undefined1 C7h
                             s_SECUREOSBIN_0000_7df3                         XREF[1]:     0000:7c9f(R)  
       0000:7df3 53 45 43        char[11]   "SECUREOSBIN"
                 55 52 45 
                 4f 53 42 
       0000:7dfe 55              ??         55h    U
       0000:7dff aa              ??         AAh
